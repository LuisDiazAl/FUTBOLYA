// <auto-generated />
using System;
using FutbolYa.WebAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FutbolYa.WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250718015211_AddReservaUsuarios")]
    partial class AddReservaUsuarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Calificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Puntaje")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Cancha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BloquesMantenimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiasNoDisponibles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoEquipamiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HorarioApertura")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HorarioCierre")
                        .HasColumnType("time");

                    b.Property<string>("LogReparaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotasEspeciales")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioBaseHora")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinDeSemana")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioNocturno")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioPremium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ProximoMantenimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Superficie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEstablecimientoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioEstablecimientoId");

                    b.ToTable("Canchas");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Mensaje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartidoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CanchaId")
                        .HasColumnType("int");

                    b.Property<string>("ClienteEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClienteNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClienteTelefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DuracionMinutos")
                        .HasColumnType("int");

                    b.Property<bool>("EsFrecuente")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioEstablecimientoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CanchaId");

                    b.HasIndex("UsuarioEstablecimientoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.ReservaUsuario", b =>
                {
                    b.Property<int>("ReservaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("ReservaId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ReservaUsuarios");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Posicion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Partido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrganizadorId")
                        .HasColumnType("int");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Partidos");
                });

            modelBuilder.Entity("PartidoUsuario", b =>
                {
                    b.Property<int>("JugadoresId")
                        .HasColumnType("int");

                    b.Property<int>("PartidosId")
                        .HasColumnType("int");

                    b.HasKey("JugadoresId", "PartidosId");

                    b.HasIndex("PartidosId");

                    b.ToTable("PartidoUsuario");
                });

            modelBuilder.Entity("Rendimientos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Actitud")
                        .HasColumnType("int");

                    b.Property<int>("Defensa")
                        .HasColumnType("int");

                    b.Property<int>("EvaluadoId")
                        .HasColumnType("int");

                    b.Property<int>("EvaluadorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartidoId")
                        .HasColumnType("int");

                    b.Property<int>("Pase")
                        .HasColumnType("int");

                    b.Property<int>("Puntualidad")
                        .HasColumnType("int");

                    b.Property<int>("TrabajoEquipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluadoId");

                    b.HasIndex("EvaluadorId");

                    b.HasIndex("PartidoId");

                    b.ToTable("Rendimientos");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Calificacion", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Usuario")
                        .WithMany("Calificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Cancha", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "UsuarioEstablecimiento")
                        .WithMany()
                        .HasForeignKey("UsuarioEstablecimientoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioEstablecimiento");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Mensaje", b =>
                {
                    b.HasOne("Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("PartidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partido");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Reserva", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Cancha", "Cancha")
                        .WithMany()
                        .HasForeignKey("CanchaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "UsuarioEstablecimiento")
                        .WithMany()
                        .HasForeignKey("UsuarioEstablecimientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cancha");

                    b.Navigation("UsuarioEstablecimiento");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.ReservaUsuario", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Reserva", "Reserva")
                        .WithMany("Jugadores")
                        .HasForeignKey("ReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reserva");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Partido", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Organizador")
                        .WithMany()
                        .HasForeignKey("OrganizadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organizador");
                });

            modelBuilder.Entity("PartidoUsuario", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("JugadoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Partido", null)
                        .WithMany()
                        .HasForeignKey("PartidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rendimientos", b =>
                {
                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Evaluado")
                        .WithMany()
                        .HasForeignKey("EvaluadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FutbolYa.WebAPI.Models.Usuario", "Evaluador")
                        .WithMany()
                        .HasForeignKey("EvaluadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Partido", "Partido")
                        .WithMany()
                        .HasForeignKey("PartidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evaluado");

                    b.Navigation("Evaluador");

                    b.Navigation("Partido");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Reserva", b =>
                {
                    b.Navigation("Jugadores");
                });

            modelBuilder.Entity("FutbolYa.WebAPI.Models.Usuario", b =>
                {
                    b.Navigation("Calificaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
